1
00:00:00,990 --> 00:00:06,390
つまり､ 検索結果のページ送りを実装するために必要な2つのパラメータは､ このようになります｡ 

2
00:00:06,600 --> 00:00:10,440
私たちは､ ページネーションという文脈で説明することなく､ それらを取り上げました｡ 

3
00:00:10,440 --> 00:00:11,820
では､ 今からそれをやってみましょう｡ 

4
00:00:12,480 --> 00:00:17,880
この講義では､ Elasticsearchに関する新しい情報を提供するのではなく､ 先ほど説明した2つのパラメータを使用して､

5
00:00:17,880 --> 00:00:23,100
アプリケーションにページネーションを実装する方法を紹介します｡

6
00:00:23,550 --> 00:00:29,130
それでは､ Webサイトや他の種類のアプリケーションにページネーションコントロールを実装するのでしょうか？

7
00:00:29,430 --> 00:00:33,720
そのためには､ 検索結果ページの数を知る必要があります｡ 

8
00:00:34,170 --> 00:00:39,000
これは､ 指定したサイズパラメータとElasticsearchが返すヒット数の合計から､

9
00:00:39,000 --> 00:00:43,110
アプリケーションレベルで計算する必要があるものです｡

10
00:00:43,650 --> 00:00:50,060
計算方法は､ ヒット数をページサイズ（i）で割るだけの簡単なものです｡  e. サイズパラメータを指定します｡ 

11
00:00:50,430 --> 00:00:55,320
割り算の余りが出た場合に備えて､ 小数点以下は切り上げることが大切です｡ 

12
00:00:55,620 --> 00:01:02,160
計算では､ いろいろなプログラミング言語で見たことがあるような､ 一つの関数を指定することで行っています｡

13
00:01:02,490 --> 00:01:07,500
例えば､ ページサイズが10で137件のヒットがあったというようなことです｡ 

14
00:01:07,740 --> 00:01:17,800
この分割により､ 13が得られる｡  7､ これを四捨五入して14､ これが実際にあるページから別のページに移動する総検索結果ページ数となる｡

15
00:01:17,820 --> 00:01:21,600
サイズパラメータとは別に､ 別のパラメータを指定する必要があります｡ 

16
00:01:21,630 --> 00:01:23,760
そのオフセットを計算する必要があるのです｡ 

17
00:01:24,180 --> 00:01:29,310
アプリケーション内でオフセットを渡すこともできますが､ 通常はページ番号を使用し､

18
00:01:29,310 --> 00:01:32,310
それに基づいてオフセットを計算します｡

19
00:01:32,790 --> 00:01:38,790
オフセットの計算方法は､ ページ番号を1つ引き､ それにページサイズを掛けます｡ 

20
00:01:39,000 --> 00:01:45,000
つまり､ ページサイズが10で､ ページ番号が6の場合､ オフセットは50になります｡ 

21
00:01:45,390 --> 00:01:53,640
Elasticsearchはsizeとfromパラメータがあれば動作するため､ これはすべてアプリケーションレベルで計算されるものです｡

22
00:01:54,150 --> 00:01:57,330
ページサイズ2での簡単な例を見てみましょう｡ 

23
00:01:57,660 --> 00:02:03,390
上部にドキュメント､ 1〜10まで､ 下部にページ番号によるページネーションコントロールを配置しています｡ 

24
00:02:03,840 --> 00:02:11,160
frontパラメータは､ 最初は0であり､ その後､ 先ほどの計算式に従って､ ページごとに2ずつ増えていきます｡

25
00:02:11,460 --> 00:02:14,580
そのため､ 1ページごとにページサイズ分増加します｡ 

26
00:02:14,790 --> 00:02:23,820
ご覧のように､ これは基本的に､ ページ番号とそれによってサイズとfromパラメータに基づいて検索結果を移動するスライドウィンドウです｡

27
00:02:24,180 --> 00:02:27,960
コースの後半では､ アプリケーションの例でその方法を紹介します｡ 

28
00:02:28,380 --> 00:02:32,130
この方法は､ 検索結果が10,000件までに制限されることを知っておく必要があります｡ 

29
00:02:32,310 --> 00:02:39,870
その理由は､ 深いページネーションを行っていると､ リクエストがどんどんヒープメモリを消費し､ リクエストに時間がかかるからです｡

30
00:02:40,110 --> 00:02:46,950
そのため､ クラスタの安定性に影響を与えないよう､ 10,000という制限を設けています｡

31
00:02:47,310 --> 00:02:53,730
通常､ ユーザーが最初の数ページより深く移動することはほとんどないため､ これは問題ではありません｡

32
00:02:53,730 --> 00:02:57,390
しかし､ 検索エンジンがより深くクロールする必要がある場合は､ 問題になることがあります｡ 

33
00:02:57,630 --> 00:03:02,550
もしそのようなものが必要なら､ searchというパラメータやunderscoreの後を使えばいい｡ 

34
00:03:02,700 --> 00:03:06,030
これは少し複雑で､ 今､ 私が入りたいことです｡ 

35
00:03:06,030 --> 00:03:09,480
そこで､ この講義にドキュメントのリンクを添付しておきました｡ 

36
00:03:09,840 --> 00:03:17,700
この制限とは別に､ このページネーション技術がどのようにうまく機能するか､ あるいはどのように機能しないかについても簡単に触れておきたいと思います｡

37
00:03:18,090 --> 00:03:24,030
リレーショナル・データベースを扱ったことがある人なら､ いわゆるカーソルの扱いに慣れているかもしれない｡

38
00:03:24,390 --> 00:03:30,990
基本的な考え方は､ データベース内でカーソルを開き､ そのカーソルを使って検索結果をスクロールすることです｡

39
00:03:31,440 --> 00:03:36,120
Elasticsearchでsizeやfrontパラメータを使用する場合は､ このような動作にはなりません｡ 

40
00:03:36,390 --> 00:03:41,880
Elasticsearchは検索クエリを処理し､ その結果を返したら完全に終了です｡ 

41
00:03:42,270 --> 00:03:45,510
この時点で､ クラスタ内で空いているものは何もない｡ 

42
00:03:45,540 --> 00:03:47,760
カーソルなどはありません｡ 

43
00:03:47,910 --> 00:03:50,160
そのため､ 各クエリーはステートレスである｡ 

44
00:03:50,730 --> 00:03:53,700
性能に関するいくつかの違いを除けば､ です｡ 

45
00:03:53,730 --> 00:03:56,010
注目すべきは､ 1つの違いです｡ 

46
00:03:56,040 --> 00:03:59,730
具体的には､ 文書が追加されたり､ 削除されたり､ 変更されたりした場合です｡ 

47
00:04:00,000 --> 00:04:03,720
そこで､ あるユーザーが何かを検索して100件ヒットしたことを掲示します｡ 

48
00:04:04,140 --> 00:04:08,640
ユーザーは1ページ目に1分間滞在し､ その後2ページ目に移動します｡ 

49
00:04:09,000 --> 00:04:14,880
その間に､ クエリによく関連する新しい文書が追加され､ 1ページ目に配置されました｡

50
00:04:15,270 --> 00:04:20,730
ユーザーは､ 1ページ目ですでに見た検索結果を､ 2ページ目で見ることになります｡

51
00:04:21,240 --> 00:04:22,760
これはあくまで一例です｡ 

52
00:04:22,770 --> 00:04:26,400
このほかにも､ 文書を修正したり削除したりする場面はあり得ます｡ 

53
00:04:26,730 --> 00:04:32,190
ポイントは､ 各検索クエリがステートレスなので､ 結果は常に最新のデータに基づいており､

54
00:04:32,190 --> 00:04:33,770
データではないことです｡

55
00:04:33,770 --> 00:04:36,240
そしてそれは､ 最初のクエリを実行したときに利用可能でした｡ 

56
00:04:36,690 --> 00:04:41,640
これは､ カーソルが開かれた時点から結果を通じて成長し続けるカーソルとは異なり､

57
00:04:41,640 --> 00:04:46,140
データの変更はカーソルに影響を与えないことを意味します｡

58
00:04:46,500 --> 00:04:51,720
先ほど申し上げたように､ 性能面でも多少の違いはありますが､ それはまた別の話です｡ 

59
00:04:52,020 --> 00:04:57,270
Elasticsearchクラスタが処理するクエリの数､ ドキュメントの追加・削除・変更の頻度によっては､

60
00:04:57,270 --> 00:05:00,340
この現象が発生しない場合もあります｡

61
00:05:00,830 --> 00:05:03,410
ただ､ 意識してもらうために､ 触れておきました｡ 
