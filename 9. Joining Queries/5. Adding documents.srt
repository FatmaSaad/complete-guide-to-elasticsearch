1
1

00:00:02,330  -->  00:00:04,000
Now that we have the mapping in place
2

2

00:00:04,000  -->  00:00:05,650
let's add some documents.
3

3

00:00:05,650  -->  00:00:08,530
You have already seen how to add documents to an index,
4

4

00:00:08,530  -->  00:00:10,720
but we need to do things a little differently
5

5

00:00:10,720  -->  00:00:13,120
when working with document relations.
6

6

00:00:13,120  -->  00:00:16,580
First off, let's add two departments to the index.
7

7

00:00:16,580  -->  00:00:19,840
For this I have to find two simple queries in advanced,
8

8

00:00:19,840  -->  00:00:21,460
which is how we would normally go about
9

9

00:00:21,460  -->  00:00:23,890
adding documents to an index.
10

10

00:00:23,890  -->  00:00:26,540
I haven't run them yet, because when using join fields
11

11

00:00:26,540  -->  00:00:28,740
we need to make a small change.
12

12

00:00:28,740  -->  00:00:31,670
When adding documents for our relation we need to specify
13

13

00:00:31,670  -->  00:00:35,200
which relation we want the document to be apart of.
14

14

00:00:35,200  -->  00:00:37,040
Remember that our mapping states
15

15

00:00:37,040  -->  00:00:40,160
that a department is a parent of an employee.
16

16

00:00:40,160  -->  00:00:42,290
Since we want to add a department now
17

17

00:00:42,290  -->  00:00:45,150
we just need to specify the name of this relation,
18

18

00:00:45,150  -->  00:00:47,320
i.e. the key value of the join field
19

19

00:00:47,320  -->  00:00:50,960
that we specified in the mapping being departments.
20

20

00:00:50,960  -->  00:00:52,560
We do this be adding a key
21

21

00:00:52,560  -->  00:00:54,630
matching the name of the join field
22

22

00:00:54,630  -->  00:00:57,270
with a value of department.
23

23

00:00:57,270  -->  00:01:00,640
We named the join fields join_field in our mapping,
24

24

00:01:00,640  -->  00:01:03,530
but that's just an arbitrary value of your choice
25

25

00:01:03,530  -->  00:01:05,830
as long as it matches what's defined in the mapping
26

26

00:01:05,830  -->  00:01:08,170
it can be anything you want.
27

27

00:01:08,170  -->  00:01:13,149
All right so let's go ahead and add a key named
28

28

00:01:13,149  -->  00:01:17,810
join_field matching the field name within the mapping,
29

29

00:01:17,810  -->  00:01:21,100
and set the value to department,
30

30

00:01:21,100  -->  00:01:23,200
and that's it, let's try to run the query.
31

31

00:01:24,780  -->  00:01:26,260
Alright, that went well.
32

32

00:01:26,260  -->  00:01:28,000
So let's go ahead and do the same thing
33

33

00:01:28,000  -->  00:01:29,740
to the second query as well.
34

34

00:01:29,740  -->  00:01:32,180
So I can just make a copy of this line
35

35

00:01:32,180  -->  00:01:33,660
and paste it in down here
36

36

00:01:34,580  -->  00:01:36,063
and run the query as well.
37

37

00:01:36,950  -->  00:01:38,550 line:15% 
Note that you can also add an object
38

38

00:01:38,550  -->  00:01:40,200 line:15% 
as the value for the join field
39

39

00:01:40,200  -->  00:01:42,030 line:15% 
and define the name of the relation
40

40

00:01:42,030  -->  00:01:44,370 line:15% 
as the value for a name option.
41

41

00:01:44,370  -->  00:01:46,350 line:15% 
I just used the shortcut in this example,
42

42

00:01:46,350  -->  00:01:49,283 line:15% 
so you're welcome to choose whichever syntax you prefer.
43

43

00:01:50,210  -->  00:01:53,250
Okay, now that we have two departments within the index
44

44

00:01:53,250  -->  00:01:55,640
it's time to add a couple of employees.
45

45

00:01:55,640  -->  00:01:58,000
I'll add three fields for each employee,
46

46

00:01:58,000  -->  00:02:03,000
name, age, and gender, so let's go ahead and type this out.
47

47

00:02:03,060  -->  00:02:06,723
PUT department _doc
48

48

00:02:06,850  -->  00:02:08,483
and give it an ID of three.
49

49

00:02:10,550  -->  00:02:12,883
Set the name field to my name.
50

50

00:02:14,890  -->  00:02:17,090
Set the age to some number
51

51

00:02:18,710  -->  00:02:21,763
and the gender to M.
52

52

00:02:22,750  -->  00:02:25,690
Since we're now dealing with the child side of the relation
53

53

00:02:25,690  -->  00:02:28,350
we need to specify which document will be the parent
54

54

00:02:28,350  -->  00:02:31,000
of the document, i.e. which department
55

55

00:02:31,000  -->  00:02:32,960
the employee belongs to.
56

56

00:02:32,960  -->  00:02:35,040
As before we do this by adding a key
57

57

00:02:35,040  -->  00:02:37,160
matching the name of the join field,
58

58

00:02:37,160  -->  00:02:40,160
but this time we have to add an update as the value.
59

59

00:02:40,160  -->  00:02:42,010
So let's get started typing that out.
60

60

00:02:42,920  -->  00:02:47,233
So join_field as before, but this time an object.
61

61

00:02:48,140  -->  00:02:51,240
Within this update we need to add an option called name
62

62

00:02:51,240  -->  00:02:53,250
with a value of employee,
63

63

00:02:53,250  -->  00:02:57,170
which tells Elasticsearch that the document is an employee.
64

64

00:02:57,170  -->  00:03:00,093
So name and employee.
65

65

00:03:01,590  -->  00:03:04,900
Last but not least, we need to add an option named parent
66

66

00:03:04,900  -->  00:03:08,080
with the ID of the parent document as the value.
67

67

00:03:08,080  -->  00:03:10,990
In this example that should be the ID of a department,
68

68

00:03:10,990  -->  00:03:15,990
so let's just enter one as the value, so parent and one.
69

69

00:03:16,990  -->  00:03:18,640
Let's go ahead and run the query.
70

70

00:03:20,930  -->  00:03:22,730
As you can see we get an error
71

71

00:03:22,730  -->  00:03:24,800
when trying to add the document.
72

72

00:03:24,800  -->  00:03:27,580
The error states that routing is missing for the join field,
73

73

00:03:27,580  -->  00:03:29,920
so what's that all about?
74

74

00:03:29,920  -->  00:03:31,670
Just to quickly refresh your memory
75

75

00:03:31,670  -->  00:03:33,750
in case you forgot what routing is,
76

76

00:03:33,750  -->  00:03:35,670
it's a way for Elasticsearch to know
77

77

00:03:35,670  -->  00:03:39,240
on which shard child a document with a given ID is stored.
78

78

00:03:39,240  -->  00:03:41,580
This is both used when indexing new documents
79

79

00:03:41,580  -->  00:03:44,230
and when finding existing ones.
80

80

00:03:44,230  -->  00:03:45,750
The default routing behavior
81

81

00:03:45,750  -->  00:03:48,650
is to use a document's ID as the routing value
82

82

00:03:48,650  -->  00:03:51,470
and feed that into a hashing function.
83

83

00:03:51,470  -->  00:03:53,740
The details of how routing works
84

84

00:03:53,740  -->  00:03:55,450
is not necessary to understand
85

85

00:03:55,450  -->  00:03:57,410
in regards to joining queries.
86

86

00:03:57,410  -->  00:03:59,580
So don't worry about that for now.
87

87

00:03:59,580  -->  00:04:02,150
The point is that we need to add a query parameter
88

88

00:04:02,150  -->  00:04:05,150
named routing with a value matching the ID
89

89

00:04:05,150  -->  00:04:08,900
of the parent document, which is one in this case.
90

90

00:04:08,900  -->  00:04:10,800
The reason we need to do this
91

91

00:04:10,800  -->  00:04:13,060
is that parent and child documents
92

92

00:04:13,060  -->  00:04:15,270
must be stored on the same shard
93

93

00:04:15,270  -->  00:04:17,560
and this is ensured by using the parent's ID
94

94

00:04:17,560  -->  00:04:19,490
as the routing value.
95

95

00:04:19,490  -->  00:04:22,250
Remember that since we did not specify a routing value
96

96

00:04:22,250  -->  00:04:25,000
explicitly when adding the parent documents,
97

97

00:04:25,000  -->  00:04:27,950
i.e. the departments, the document IDs
98

98

00:04:27,950  -->  00:04:30,200
were being used implicitly by Elasticsearch
99

99

00:04:30,200  -->  00:04:32,950
when routing the documents to a shard.
100

100

00:04:32,950  -->  00:04:34,340
All right, so let's go ahead and add
101

101

00:04:34,340  -->  00:04:35,743
the routing query parameter.
102

102

00:04:37,730  -->  00:04:39,683
So question mark, routing,
103

103

00:04:40,670  -->  00:04:43,770
and the parent ID, which is one.
104

104

00:04:43,770  -->  00:04:46,520
If we run the query again we should be able to successfully
105

105

00:04:46,520  -->  00:04:48,133
add the document, so let's try.
106

106

00:04:49,570  -->  00:04:51,240
And indeed it worked this time
107

107

00:04:51,240  -->  00:04:52,860
and the department and the employee
108

108

00:04:52,860  -->  00:04:55,310
are now stored on the same shard.
109

109

00:04:55,310  -->  00:04:58,890
If for whatever reason you made use of custom routing
110

110

00:04:58,890  -->  00:05:00,960
remember to adjust the value of the routing
111

111

00:05:00,960  -->  00:05:03,190
query parameter accordingly.
112

112

00:05:03,190  -->  00:05:05,440
By the way, in case you were wondering,
113

113

00:05:05,440  -->  00:05:07,700
I left the employee fields out of the mapping
114

114

00:05:07,700  -->  00:05:09,870
and just let Elasticsearch handle the mapping
115

115

00:05:09,870  -->  00:05:12,460
for the fields through dynamic mapping.
116

116

00:05:12,460  -->  00:05:14,700
And that's it, that's how to add documents
117

117

00:05:14,700  -->  00:05:18,440
and define that a document is related to a parent document.
118

118

00:05:18,440  -->  00:05:19,940
Let's finish this lecture off
119

119

00:05:19,940  -->  00:05:22,430
by adding a couple more employees beginning
120

120

00:05:22,430  -->  00:05:24,610
with one for the marketing department.
121

121

00:05:24,610  -->  00:05:28,730
So I'll just make a copy of this query right here,
122

122

00:05:28,730  -->  00:05:30,443
paste it in and adjust it.
123

123

00:05:32,330  -->  00:05:36,680
So I'll set the ID to four, first of all,
124

124

00:05:36,680  -->  00:05:40,463
I'll set the name to, let's say John Doe,
125

125

00:05:42,040  -->  00:05:42,873
aged 44
126

126

00:05:45,720  -->  00:05:49,683
and the parent will be the department with an ID of two.
127

127

00:05:51,716  -->  00:05:54,566
Then I'll change the routing query parameter accordingly.
128

128

00:05:55,580  -->  00:05:57,123
All right, and let's run it.
129

129

00:05:58,260  -->  00:06:00,930
Just to have more than two employees within the index
130

130

00:06:00,930  -->  00:06:03,930
I'll paste in a handful of queries and run them.
131

131

00:06:03,930  -->  00:06:06,443
So I'll do that down here, paste them in,
132

132

00:06:07,710  -->  00:06:09,460
and I'll just run them one-by-one
133

133

00:06:17,890  -->  00:06:19,480
like so.
134

134

00:06:19,480  -->  00:06:20,890
In case you're following along
135

135

00:06:20,890  -->  00:06:23,430
you can find these queries within the GitHub repository
136

136

00:06:23,430  -->  00:06:26,580
so that you don't have to type them out by hand.
137

137

00:06:26,580  -->  00:06:29,340
Now that we have just a little bit of data to play with
138

138

00:06:29,340  -->  00:06:31,180
let's move on to seeing how we can query
139

139

00:06:31,180  -->  00:06:34,133
the document relation that we defined within the mapping.
