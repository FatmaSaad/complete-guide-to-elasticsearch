1
00:00:01,010 --> 00:00:02,630
検索クエリを書くとき

2
00:00:02,630 --> 00:00:05,160
これには2つの方法があります｡ 

3
00:00:05,180 --> 00:00:09,680
リクエストボディの中に検索クエリを書くことで､ すでにそのうちの1つを見たことになります｡ 

4
00:00:09,950 --> 00:00:13,100
これは､ クエリDSLと呼ばれるものを使って行われます｡ 

5
00:00:13,400 --> 00:00:20,030
これは､ 最も柔軟で一般的な検索クエリの書き方であり､ このコースでも使用する方法です｡

6
00:00:20,690 --> 00:00:25,370
仕組みとしては､ リクエストUIに続いて下線付きの隣接ドキュメントを追加します｡ 

7
00:00:25,400 --> 00:00:27,080
講座の前半でご覧いただいたように

8
00:00:27,650 --> 00:00:32,600
検索クエリの場合は､ クエリオブジェクトを追加し､ クエリ定義を格納する｡ 

9
00:00:33,020 --> 00:00:38,710
すでにいくつかのクエリのスニークピークをご覧になっているので､ どちらにしてもどんなものか覚えているかもしれませんね｡

10
00:00:38,720 --> 00:00:39,950
以下はその一例です｡ 

11
00:00:40,910 --> 00:00:47,750
この例では､ query matchがクエリータイプで､ 検索したいフィールドの名前をキーとして含んでいます｡

12
00:00:48,110 --> 00:00:55,040
このキーは､ そのフィールドのクエリーオプションのオプションで検索する値を指定するオブジェクトそのものである｡

13
00:00:55,580 --> 00:01:00,830
この場合､ クエリの設定はしないので､ 実はdescriptionキーに直接検索値を指定することで､

14
00:01:00,830 --> 00:01:03,350
クエリを短縮することができるのです｡

15
00:01:03,740 --> 00:01:06,110
近々､ たくさんのクエリ例をご覧いただけるようになります｡ 

16
00:01:06,110 --> 00:01:10,220
つまり､ クエリDSLのクエリがどのようなものかを知ってもらうだけでいいのです｡ 

17
00:01:10,850 --> 00:01:20,300
クエリDSLとは別に､ リクエストUIで検索を行うこと､ つまり､ リクエストUIに直接検索クエリを埋め込むことも可能です｡

18
00:01:20,540 --> 00:01:23,420
これをクエリーストリングクエリーという｡ 

19
00:01:23,750 --> 00:01:30,980
この方法でもかなり高度なクエリを実行できますが､ 表現力が乏しく､ すぐに読みづらくなってしまいます｡

20
00:01:31,400 --> 00:01:35,330
また､ リクエストUI方式ではどうしてもできないことがあります｡ 

21
00:01:35,540 --> 00:01:43,250
しかし､ この検索方法は､ コマンドラインからのデバッグや開発中に素早く検索を実行するのに非常に便利です｡

22
00:01:43,700 --> 00:01:48,800
興味深いことに､ クエリDSLは実際にクエリ文字列の構文もサポートしている｡ 

23
00:01:49,400 --> 00:01:56,930
先ほども言ったように､ 少なくともクエリ文字列による検索の基本を紹介した後は､ このコースを通してクエリDSLを使用することになります｡

24
00:01:57,380 --> 00:02:02,570
一般的には､ 最初からクエリDSLを使うことをお勧めします｡ そうすれば､ リクエストUI検索では利用できない機能を使う必要があるときに､

25
00:02:02,570 --> 00:02:09,470
クエリを変換しなければならないような状況に陥ることはありません｡

26
00:02:09,770 --> 00:02:13,820
いずれにせよ､ 以上がElasticsearchでデータを検索するための方法です｡ 

27
00:02:13,820 --> 00:02:16,400
では､ さっそくデータの探索を始めましょう｡ 
