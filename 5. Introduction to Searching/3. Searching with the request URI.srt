1
00:00:02,350 --> 00:00:11,110
このコースではDSLを使用すると書きましたが､ これはElasticsearchのすべての機能を公開する最も一般的な方法だからです｡

2
00:00:11,320 --> 00:00:16,900
とはいえ､ リクエストUIアプローチの使い方を紹介する講義を捧げたいのは､ 正直に言うと､

3
00:00:16,900 --> 00:00:19,410
人はそれぞれ違うからです｡

4
00:00:19,420 --> 00:00:25,990
また､ リクエストUI検索は､ ターミナルをハックするときなど､ まだまだ使い道があると思います｡

5
00:00:26,410 --> 00:00:29,470
さっそく､ 最初の検索クエリを書いてみましょう｡ 

6
00:00:29,680 --> 00:00:38,230
検索リクエストを発行する方法は､ 検索APIにリクエストを送信し､ queueというクエリパラメータでクエリを指定する方法です｡

7
00:00:38,500 --> 00:00:41,950
手始めに､ 全てにマッチするクエリを書いてみます｡ 

8
00:00:42,220 --> 00:00:43,750
そこで､ 私はリクエストを受ける｡ 

9
00:00:43,990 --> 00:00:53,170
そこで､ product indexとdefault typeとunderscore search APIを追加し､ queue query parameterにアスタリスクを入力して､

10
00:00:53,170 --> 00:00:56,530
全てにマッチさせることにします｡

11
00:00:58,920 --> 00:01:07,530
結果を見ると､ 1000件の文書がマッチしており､ ヒットのプロパティの中に別のヒットのプロパティがネストしている中でマッチを見つけることができます｡

12
00:01:07,530 --> 00:01:13,350
ただ､ 単純に考えて､ すべてのドキュメントが返送されるわけではありません｡

13
00:01:13,590 --> 00:01:18,660
返されるドキュメントの数は size パラメータで制御できますが､ これはクエリ DSL

14
00:01:18,660 --> 00:01:25,560
とリクエスト UI の検索の両方で同じなので､ コースの後半でページネーションについて説明するときに戻します｡

15
00:01:26,070 --> 00:01:31,470
検索結果内の各フィールドの意味については､ また何回かに分けてレクチャーする予定です｡ 

16
00:01:31,470 --> 00:01:35,550
そこで､ とりあえず他のリクエスト､ UIクエリをいくつか紹介したいと思います｡ 

17
00:01:35,940 --> 00:01:41,100
例えば､ name Fieldにlobsterという単語が含まれる文書を探したいとする｡ 

18
00:01:41,190 --> 00:01:46,260
そのためには､ フィールド名､ コロン､ そして検索する値を指定すればよい｡ 

19
00:01:46,740 --> 00:01:55,470
そこで､ アスタリスクを削除して､ フィールド名であるnameとコロン､ そしてlobsterを記述してクエリを実行しましょう｡

20
00:01:56,100 --> 00:02:02,940
検索結果からわかるように､ 返された文書には､ nameフィールドにlobsterという用語が含まれています｡

21
00:02:03,270 --> 00:02:12,420
また､ マッチングした文書は関連性でソートされ､ 最初の文書は下の文書よりも関連性の高いコースになっていることも特筆すべき点である｡

22
00:02:12,690 --> 00:02:15,180
それもまた､ 近いうちにご紹介したいと思います｡ 

23
00:02:15,180 --> 00:02:17,070
でも､ ちょっと言ってみたかったんです｡ 

24
00:02:17,580 --> 00:02:21,450
あるいは､ meetsというタグを含む文書をすべて探したい場合もある｡ 

25
00:02:21,840 --> 00:02:27,360
文字列の配列を扱うとはいえ､ Elasticsearchはこれを理解できるほど明確なので､

26
00:02:27,360 --> 00:02:29,580
実はアプローチは同じなのです｡

27
00:02:30,030 --> 00:02:35,520
では､ 今入力したものを置き換えて､ テキスト､ コロン､ ミートと書いてみましょう｡ 

28
00:02:37,160 --> 00:02:42,400
最後に､ 検索クエリでブール論理を使う例を紹介します｡ 

29
00:02:42,410 --> 00:02:48,170
End キーワードを追加して､ 先ほどと同じ構文で別のフィールドを追加するだけです｡ 

30
00:02:48,380 --> 00:02:55,250
そこで､ meatタグと､ tunaという用語を含む名前を含む文書を照合したい場合､ 次のようにすることができる｡

31
00:02:55,610 --> 00:02:58,430
だから､ さっき言ったように､ スペースを入れればいいんです｡ 

32
00:02:58,460 --> 00:03:04,580
キーワードが終了してから､ 命名されているフィールドの名前をColonと書きます｡ 

33
00:03:05,340 --> 00:03:06,030
マグロです｡ 

34
00:03:07,490 --> 00:03:08,600
そして実行しよう｡ 

35
00:03:08,690 --> 00:03:13,040
もちろん､ やろうと思えばandの代わりにorというキーワードを使うこともできたんですけどね｡ 

36
00:03:13,490 --> 00:03:18,050
なお､ Curlなどで同じクエリを実行する場合は､ そのようになります｡ 

37
00:03:18,050 --> 00:03:22,880
20を割り当てたパーセントでスペースをエンコードしないと､ クエリーは失敗します｡ 

38
00:03:23,270 --> 00:03:26,630
Cabanaのコンソールツールは､ まさにこれを便利に実現してくれているのです｡ 

39
00:03:27,140 --> 00:03:32,390
リクエストUIの検索は､ これ以外にもいろいろなことができますが､ これらはごく基本的なことでした｡ 

40
00:03:32,540 --> 00:03:37,430
括弧を使ったブーリアンロジックや､ 重要度のブーストなど､ より多くの機能を盛り込むことができます｡ 

41
00:03:37,430 --> 00:03:38,780
でも､ この辺にしておきます｡ 

42
00:03:39,230 --> 00:03:44,360
リクエストUI検索についてもっと詳しく知りたい方は､ ドキュメントを参照してください｡ 

43
00:03:44,360 --> 00:03:49,520
というのも､ これからクエリDSLを始めたいのですが､ そこではこの他にも多くのことを学ぶことができるからです｡ 
