1
00:00:02,410 --> 00:00:06,970
前項では､ アナライザーと転置インデックスについてお話しました｡ 

2
00:00:07,210 --> 00:00:09,790
では､ なぜそのようなことが重要なのか､ その理由を考えてみましょう｡ 

3
00:00:09,790 --> 00:00:11,920
原油を追加するときは､ 我々のデータに対してです｡ 

4
00:00:12,220 --> 00:00:17,890
そのために､ データを検索する際に使用できる2つのクエリグループ､ 用語レベルクエリと全文クエリについて言及し､

5
00:00:17,890 --> 00:00:23,900
2つのクエリグループの違いを示したいと思います｡

6
00:00:23,920 --> 00:00:29,110
あらかじめ無料のクエリを用意していますが､ どれも次のセクションで紹介します｡ 

7
00:00:29,470 --> 00:00:32,350
それぞれを実行し､ 結果を見てみましょう｡ 

8
00:00:32,860 --> 00:00:36,700
そこで､ 最初のクエリを実行すると､ 5件ヒットする｡ 

9
00:00:37,150 --> 00:00:40,330
2回目を実行すると､ ヒット数がゼロになるんです｡ 

10
00:00:40,750 --> 00:00:46,720
2つのクエリの唯一の違いは､ 2番目のクエリではロブスターという用語が大文字になっていることです｡ 

11
00:00:46,720 --> 00:00:49,420
では､ 一体なぜ2つ目のクエリが一致しないのでしょうか？

12
00:00:49,420 --> 00:00:55,600
なぜなら､ 最初のクエリをもう一度実行すると､ 最初のマッチには､ その名前内にロブスターという用語が含まれており､

13
00:00:55,600 --> 00:00:58,300
それも大文字で書かれていることがわかるからです｡

14
00:00:58,540 --> 00:01:05,830
さらに混乱させるために､ 最初のクエリを実行してみましょう｡ これは､ 大文字の単語を探すフルテキストクエリです｡

15
00:01:08,020 --> 00:01:10,330
そのクエリーはドキュメントにマッチしています｡ 

16
00:01:10,330 --> 00:01:16,120
では､ なぜマッチクエリは大文字の単語を含む文書にマッチし､ タームクエリはマッチしないのでしょうか？

17
00:01:16,420 --> 00:01:22,330
その理由は､ 用語レベルのクエリと全文クエリには本質的な違いがあるからである｡ 

18
00:01:22,720 --> 00:01:27,280
この3つのクエリをそれぞれ図解しながら見ていくと､ 私の言いたいことがわかると思います｡ 

19
00:01:27,910 --> 00:01:31,540
まず､ レベルクエリの中には､ 正確な値を検索するものがあります｡ 

20
00:01:31,780 --> 00:01:38,890
最初のクエリが完全一致であることを不思議に思うかもしれませんが､ 一致する文書ではロブスターという用語が大文字になっているからです｡

21
00:01:39,280 --> 00:01:45,700
その理由は､ 実際には文書そのものではなく､ 用語の転置インデックスを検索しているからである｡

22
00:01:46,090 --> 00:01:52,900
つまり､ ロブスターという言葉をすべて小文字で検索すると､ この言葉は転置インデックスで検索される｡

23
00:01:53,170 --> 00:01:58,240
ドキュメントのテキストフィールドが標準のアナライザーを通過したため､ 一致したのです｡ 

24
00:01:58,420 --> 00:02:04,450
標準解析器には小文字のトークンフィルターがあることを思い出してください｡ 大文字の用語ロブスターが解析されたため､

25
00:02:04,450 --> 00:02:11,620
転置インデックスにすべて小文字で用語が格納されるのです｡

26
00:02:11,650 --> 00:02:16,600
転置インデックス内の用語は､ 私たちが探しているものと完全に一致する｡ 

27
00:02:16,630 --> 00:02:22,930
どちらの用語もすべて小文字なので､ 2つ目のクエリでは同じようにはいかない｡ 

28
00:02:23,080 --> 00:02:26,950
ここでは､ ロブスターという言葉を大文字で検索しています｡ 

29
00:02:27,130 --> 00:02:36,340
転置インデックス内の用語はすべて小文字であるため､ 解析処理の結果､ クエリは文書と一致しない｡

30
00:02:36,490 --> 00:02:40,140
それは､ タームレベルのクエリは完全一致で検索されるからです｡ 

31
00:02:40,150 --> 00:02:42,550
だから､ 文字のケーシングは重要なのです｡ 

32
00:02:42,850 --> 00:02:44,860
では､ 3つ目のクエリはどうでしょうか？

33
00:02:45,190 --> 00:02:51,520
大文字で検索しているのに､ 転置インデックス内の用語は小文字なのに､ なぜマッチするのでしょうか？

34
00:02:51,640 --> 00:02:56,770
ドイツ語レベルのクエリとは異なり､ 全文クエリが分析されるからである｡ 

35
00:02:56,920 --> 00:03:05,590
これは､ 検索クエリが､ この特定のクエリに対して､ 文書のテキストフィールドが行ったのと同じ分析プロセスを経ることを意味する｡

36
00:03:05,620 --> 00:03:11,590
つまり､ 大文字の用語ロブスターは､ 標準解析器の一部として小文字になり､ 転置インデックス内の用語と比較すると､

37
00:03:11,590 --> 00:03:19,270
転置インデックス内の用語は全く同じ解析を経たため､ 一致したことになる｡

38
00:03:19,840 --> 00:03:22,360
このことは､ 非常に重要なことです｡ 

39
00:03:22,460 --> 00:03:33,430
用語レベルのクエリは､ 正確な値を検索し､ 分析されませんが､ フルテキストのクエリは､ 検索されるフィールドに定義されているのと同じアナライザーを使用して分析されます｡

40
00:03:33,910 --> 00:03:45,700
したがって､ 転置インデックス内に存在する用語しか検索できない｡ つまり､ 転置インデックス内の用語も検索クエリ自体も同じ形式に正規化されていなければならないのである｡

41
00:03:45,700 --> 00:03:45,700
e. は同じアナライザーを使用します｡

42
00:03:47,320 --> 00:03:53,320
ある文書が標準的なアナライザーを使ってインデックスされ､ 用語が小文字になったとする｡ 

43
00:03:53,620 --> 00:03:59,860
もし､ 用語を小文字にしない別の解析器を使ったフルテキストクエリを実行すると､ 用語が一致しないため､

44
00:03:59,860 --> 00:04:03,130
文書がマッチングされない｡

45
00:04:03,610 --> 00:04:11,500
つまり､ 先ほどの話をまとめると､ 全文検索は転置インデックスと同じアナライザーで解析する｡

46
00:04:11,530 --> 00:04:13,450
少なくとも､ それがデフォルトの動作です｡ 

47
00:04:13,750 --> 00:04:19,030
これは､ 標準アナライザが転置インデックス内の用語だけでなく､ 検索クエリ自体も小文字に配慮しているためで､

48
00:04:19,030 --> 00:04:23,820
検索クエリは大文字小文字に関係なくマッチする｡

49
00:04:23,830 --> 00:04:28,960
なぜなら､ ユーザーがケーシングを気にすることは､ まずありえないからです｡ 

50
00:04:29,530 --> 00:04:33,640
ただし､ タームレベルのクエリについては､ 同様に解析されない｡ 

51
00:04:33,760 --> 00:04:39,250
このため､ 用語レベルのクエリは､ 転置インデックスが検索クエリと異なることが多く､

52
00:04:39,250 --> 00:04:44,200
予期せぬ結果をもたらすため､ 全文検索の実行には適していない｡

53
00:04:44,620 --> 00:04:52,450
その代わり､ 項レベルのクエリは､ 列挙値､ 数値､ 日付などのマッチングに適している｡  であり､ インスタンスではない｡

54
00:04:52,810 --> 00:04:54,970
では､ なぜこのような設計になったのでしょうか｡ 

55
00:04:55,120 --> 00:05:01,750
さて､ この講義の簡単なクエリを考慮すると､ 事実上､ クエリの大文字と小文字を区別しないようにしていることになります｡

56
00:05:02,290 --> 00:05:08,350
全性検索を行う場合､ ユーザーはケーシングに関係なく文書がマッチすることを期待する｡ 

57
00:05:08,560 --> 00:05:14,140
おそらく､ 同じ意味を共有する jump や jumping など､ 同じ単語の異なるバリアントを説明するために､

58
00:05:14,140 --> 00:05:17,320
ステミングを適用するのでしょう｡

59
00:05:17,710 --> 00:05:22,240
あるいは､ 同義語を利用して､ より知的な検索を行いたいと考えたのかもしれません｡ 

60
00:05:22,540 --> 00:05:24,060
だから､ この2つを両立させてください｡ 

61
00:05:24,070 --> 00:05:28,870
クエリーは､ 文書のインデックス時に使用されたものと同じ解析器を使用する必要があります｡ 

62
00:05:29,230 --> 00:05:33,940
繰り返しになりますが､ 用語レベルクエリの場合は､ 正確な値にマッチするため､ この限りではありません｡ 

63
00:05:34,450 --> 00:05:38,560
繰り返しになりますが､ 完全な性別の検索を行うために､ 用語レベルのクエリを使用しないでください｡ 

64
00:05:38,770 --> 00:05:43,540
用語レベルクエリと全文クエリの違いを知っておくことは重要である｡ 

65
00:05:43,540 --> 00:05:48,700
そして､ 今､ このことをお伝えしたかったのです｡ なぜなら､ これから､ さらにいくつかの検索クエリについて調べ始める時期だからです｡ 

66
00:05:48,880 --> 00:05:55,060
ここでは､ まず用語レベルのクエリを取り上げ､ 次にフルテキストクエリ､ さらに高度なクエリについて説明します｡ 

67
00:05:55,060 --> 00:05:56,830
では､ さっそく始めましょう｡ 
