1
00:00:02,320 --> 00:00:05,360
ある文書が検索クエリにマッチしなかったので不思議に思っている｡ 

2
00:00:05,380 --> 00:00:09,090
それは､ ほぼ確実にいつかは経験することです｡ 

3
00:00:09,100 --> 00:00:18,160
そこで今回は､ 与えられたクエリを送信できる説明APIが存在する理由をデバッグして見つけ出す､ とても便利な方法を紹介したいと思います｡

4
00:00:18,190 --> 00:00:26,440
リクエストUIで文書のIDを指定すると､ その特定の文書が一致した理由や一致しなかった理由が結果に表示される｡

5
00:00:26,860 --> 00:00:31,060
例を打ち出しますので､ どのような結果になるかは､ すぐにおわかりいただけると思います｡ 

6
00:00:31,360 --> 00:00:37,480
そこで､ いつも通りproduct indexにgetリクエストを発行し､ default typeを発行します｡ 

7
00:00:37,720 --> 00:00:46,660
そして､ IDやアンダースコアとして1を答え､ APIを説明し､ クエリ句でリクエストボディを追加します｡

8
00:00:47,990 --> 00:00:49,730
そして､ タームクエリ｡ 

9
00:00:49,850 --> 00:00:51,740
これが何を意味するかは､ 後でおわかりいただけると思います｡ 

10
00:00:52,340 --> 00:01:02,000
そして､ これを短縮して､ フィールドをオブジェクトではなく､ 名前フィールド､ そして値を直接指定することにします｡

11
00:01:02,000 --> 00:01:05,030
ということで､ 今回はロブスターを検索してみたいと思います｡ 

12
00:01:05,780 --> 00:01:07,790
よし､ どんな風に見えるか見てみよう｡ 

13
00:01:08,480 --> 00:01:10,970
そこで､ タームクエリを指定したことに注目してください｡ 

14
00:01:11,120 --> 00:01:14,090
他のクエリタイプを指定することも可能でした｡ 

15
00:01:14,120 --> 00:01:16,610
だから､ あまり気にしないでください｡ 

16
00:01:16,910 --> 00:01:20,660
そのため､ 結果には､ その用語は文書内で見つからなかったと記載されます｡ 

17
00:01:20,690 --> 00:01:23,450
この場合､ 明らかにそれが理由ですね｡ 

18
00:01:23,450 --> 00:01:27,840
しかし､ マッチングできるパスが異なるなど､ より複雑なクエリの場合｡ 

19
00:01:27,860 --> 00:01:32,990
これは､ ある文書がクエリにマッチしなかった理由をデバッグするのに非常に有効な方法である｡ 

20
00:01:33,260 --> 00:01:36,440
あるいは､ ある文書がなぜ一致したのか不思議に思うかもしれません｡ 

21
00:01:36,650 --> 00:01:42,140
いずれの場合も､ Explain APIは非常に便利であり､ その使い方はご理解いただけたと思います｡ 
