1
00:00:02,570 --> 00:00:08,950
先ほどはフィルター集計をご覧いただきましたが､ 今度はそれに関連したフィルター集計をご覧ください｡ 

2
00:00:09,230 --> 00:00:14,960
この集計を利用してできることは､ 文書をどのバケツに入れるかのルールを定義することである｡

3
00:00:15,320 --> 00:00:22,070
これは､ バケット名と､ バケットに入れるために文書がマッチしなければならないクエリ句を指定することによって行われる｡

4
00:00:22,520 --> 00:00:30,590
そこで､ certという名前のバケットを指定し､ そのバケットにはcertという単語を名前に含む商品だけを入れるように定義することができる｡

5
00:00:30,800 --> 00:00:34,640
その例を､ 今回もレシピの索引を使って説明しましょう｡ 

6
00:00:34,670 --> 00:00:40,380
具体的には､ パスタのレシピとスパゲッティのレシピの2つのバケツを用意したいのです｡ 

7
00:00:40,400 --> 00:00:43,970
そこで､ 集計を追加して､ それをフィルターと呼ぶことにします｡ 

8
00:00:44,150 --> 00:00:48,050
そして､ 集計の型はPerlのfiltersになるそうです｡ 

9
00:00:48,620 --> 00:00:53,790
さて､ このアグリゲーションには､ あなたには奇妙に見えるかもしれないフィルター・パラメーターが含まれています｡ 

10
00:00:53,810 --> 00:00:55,550
私も最初はそうでした｡ 

11
00:00:55,940 --> 00:01:00,530
なぜそうなるかというと､ フィルター集計にパラメータを追加できるからです｡ 

12
00:01:00,530 --> 00:01:06,560
そのため､ フィルター集計の中にあるフィルターパラメーターの中でフィルターを定義すればよいのです｡ 

13
00:01:06,800 --> 00:01:12,020
分かりにくいかもしれませんが､ このアグリゲーションはそのように設計されています｡ 

14
00:01:12,410 --> 00:01:17,150
それでは､ 最初のクエリ､ いや､ 最初のバケットルールを追加してみましょう｡ 

15
00:01:17,630 --> 00:01:22,400
このパスタという名前は､ これから作成されるバケットの名前になりますね｡ 

16
00:01:22,670 --> 00:01:24,380
これはオブジェクトでしょう｡ 

17
00:01:24,380 --> 00:01:27,110
そして､ この中にクエリ句を追加します｡ 

18
00:01:27,500 --> 00:01:30,200
この例では､ マッチクエリを使用します｡ 

19
00:01:31,280 --> 00:01:36,080
つまり､ これは通常の検索クエリを実行する際に目にしたことのある､ どんなクエリクラスでも構わないということです｡ 

20
00:01:36,110 --> 00:01:37,340
違いはありません｡ 

21
00:01:37,700 --> 00:01:42,830
そこで､ 私がやりたいのは､ タイトル欄でパスタという言葉を検索することです｡ 

22
00:01:43,500 --> 00:01:51,330
つまり､ タイトルにpastaという言葉を含む文書を､ pastaという名前のバケツに入れるということです｡

23
00:01:51,840 --> 00:01:52,440
わかりました｡ 

24
00:01:52,440 --> 00:01:55,590
これを理解するために､ もう一つバケットルールを追加してみましょう｡ 

25
00:01:58,230 --> 00:01:59,880
スパゲティという名前をつける｡ 

26
00:02:01,680 --> 00:02:03,450
また､ マッチクエリを使用します｡ 

27
00:02:05,230 --> 00:02:05,620
もう一度｡ 

28
00:02:05,620 --> 00:02:10,180
タイトル欄で､ スパゲッティという言葉を検索してください｡ 

29
00:02:10,720 --> 00:02:17,410
さて､ この構文があまり混乱しないことを祈りますが､ とにかく､ クエリを実行して､ 結果がどのように見えるか見てみましょう｡

30
00:02:18,430 --> 00:02:25,090
このように､ 適切なレシピで2つのバケットを作成し､ その結果でドキュメント数を確認することができます｡

31
00:02:25,390 --> 00:02:31,780
しかし､ 作成されたバケットに対して､ 文書数の計算以外のことを行いたい場合も多いでしょう｡

32
00:02:31,930 --> 00:02:39,010
フィルターにサブアグリゲーションを追加して､ フィルが作成されるバケットに基づいてサブアグリゲーションが仕事をするようにすることができます｡

33
00:02:39,190 --> 00:02:44,530
AVG集計を利用して､ 各バケツの平均評価を計算してみましょう｡ 

34
00:02:45,100 --> 00:02:51,160
では､ フィルターキーと同じ階層に､ Xキーを定義してみましょう｡ 

35
00:02:51,520 --> 00:03:00,910
そしてここでは､ AVGという名前の集計をスコア・レートに追加し､ タイプはAVG､ フィルターはレーティングにします｡

36
00:03:01,270 --> 00:03:03,220
さっそく実行してみましょう｡ 

37
00:03:03,340 --> 00:03:10,090
そして､ 文書数とともに､ 2つのバケツ内の文書の平均評価も得られるようになりました｡

38
00:03:10,180 --> 00:03:14,260
そうすることで､ 集計を実行する前に文書を絞り込むことができるのです｡ 

39
00:03:14,290 --> 00:03:15,460
カッコイイでしょ？
