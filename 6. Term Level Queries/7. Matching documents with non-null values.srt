1
00:00:02,530 --> 00:00:08,680
この講義では､ 与えられたフィールドに少なくとも1つの非NULL値を持つドキュメントをマッチさせる方法を紹介します｡

2
00:00:09,100 --> 00:00:11,950
そのためにexistsというクエリを使用します｡ 

3
00:00:12,250 --> 00:00:14,320
では､ NULLでない値とは何でしょうか｡ 

4
00:00:14,680 --> 00:00:20,170
緩やかな型付けを行う他の言語とは異なり､ Elasticsearchに関しては答えは非常にシンプルで､

5
00:00:20,170 --> 00:00:25,420
非ヌル値は単にヌルでないあらゆる値のことを指します｡

6
00:00:25,750 --> 00:00:31,330
例えばPHPなどのプログラミング言語に慣れている人なら､ 厳密なチェックをしない限り､

7
00:00:31,330 --> 00:00:35,020
空の文字列はnullと等しいことが分かるでしょう｡

8
00:00:35,350 --> 00:00:42,220
Elasticsearchではこのようなことはありません｡ つまり､ 空文字列を含むフィールドは､ 既存のクエリとマッチングされることになります｡

9
00:00:42,640 --> 00:00:47,920
では､ 例えば､ 既存のクエリクラスにマッチしない空の配列の場合はどうでしょうか｡ 

10
00:00:47,920 --> 00:00:56,470
なぜなら､ 値のない配列はexistクエリの定義（フィールドには少なくとも1つの非NULL値を持つべき）を満たさないからです｡

11
00:00:56,860 --> 00:01:04,720
テキストフィールドが文字列の配列であることから､ 少なくとも1つのタグを持つ文書にマッチする存在クエリを使用することができます｡

12
00:01:04,990 --> 00:01:08,770
そこで､ クエリのためにここにexistsを入力します｡ 

13
00:01:09,730 --> 00:01:11,890
そして､ フィールドを指定します｡ 

14
00:01:13,570 --> 00:01:15,760
そして､ それがテキトーになる｡ 

15
00:01:16,360 --> 00:01:18,130
そして､ 実行に移しましょう｡ 

16
00:01:18,460 --> 00:01:22,810
結果をスクロールしていくと､ すべての試合に少なくとも1つのタグがあることがわかるはずです｡ 

17
00:01:26,420 --> 00:01:28,640
では､ クエリの仕組みはどうなっているのでしょうか？

18
00:01:28,820 --> 00:01:35,240
さて､ 前のセクションで紹介したアンダースコア・フィールド､ アンダースコア・ネーム､ メゾ・フィールドを覚えている人もいるかもしれない｡

19
00:01:35,780 --> 00:01:42,200
Elasticsearchは､ 与えられたフィールドに既知のNULL値を含むドキュメントを検索する際に､ このメタフィールドを内部的に使用します｡

20
00:01:42,740 --> 00:01:49,160
また､ NULLアンダースコアの値のマッピングパラメータを覚えているかもしれませんが､ これもアクセスクエリに影響を及ぼします｡

21
00:01:49,430 --> 00:01:55,820
null値を指定すると､ その文書はもはや空の値を持たないので､ クエリでマッチングされる｡

22
00:01:56,300 --> 00:01:58,910
これで次のタームレベルのクエリに答えられる｡ 
