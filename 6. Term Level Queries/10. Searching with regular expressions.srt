1
00:00:07,150 --> 00:00:15,040
Wildを使う以外に､ 正規表現とregexクエリを使って動的に単語をマッチングさせる方法があります｡

2
00:00:15,310 --> 00:00:19,720
前回の講義のクエリを変更して､ 代わりに正規表現を使用してみましょう｡ 

3
00:00:20,020 --> 00:00:25,270
ということで､ まずはクエリタイプを正規表現に変更する必要がありますね｡ 

4
00:00:25,750 --> 00:00:32,650
やはりテキストフィールドのキーワードマッピングが必要で､ まずはクエスチョンマークを消す必要がありますね｡

5
00:00:33,010 --> 00:00:35,680
そして代わりにキャラクタークラスに入ります｡ 

6
00:00:37,570 --> 00:00:44,860
アルファベットの小文字と大文字の両方にマッチし､ ここに少なくとも1文字が存在することを条件とする｡

7
00:00:44,860 --> 00:00:46,450
そこで､ プラス記号を入力します｡ 

8
00:00:46,750 --> 00:00:54,880
つまり､ この人はアルファベットの文字の範囲を持つ文字クラスを使っていて､ 少なくともこれらの文字のうち1つは存在しているはずなのです｡

9
00:00:55,120 --> 00:00:56,560
では､ クエリを実行してみましょう｡ 

10
00:00:57,340 --> 00:01:00,100
そして､ その結果を見ると､ またしてもそのことがよくわかります｡ 

11
00:01:00,100 --> 00:01:03,160
テキストフィールドに野菜という言葉が含まれる文書が一致します｡ 

12
00:01:05,360 --> 00:01:08,780
正規表現の書き方は､ 談話の範囲外です｡ 

13
00:01:08,780 --> 00:01:15,620
ただ､ ElasticsearchはLUCENEという正規表現エンジンを使っていて､ これはPerlと互換性がないことを申し添えておきます｡

14
00:01:16,070 --> 00:01:22,310
つまり､ 一部の機能がサポートされていないため､ 完全な正規表現構文にアクセスできないのです｡

15
00:01:22,550 --> 00:01:26,680
サポートされていないものの例として､ キャラクタークラスがあります｡ 

16
00:01:26,690 --> 00:01:30,710
だから､ 数値やアンカーにはバックスラッシュDを書くだけでいい｡ 

17
00:01:31,130 --> 00:01:36,950
アンカーとは､ 行や文字列の先頭と末尾を示すカレントシンボルとドル記号のことです｡ 

18
00:01:37,370 --> 00:01:42,980
アンカーは用語を検索するため､ フィールドの値全体ではなく､ フィールド内の用語に正規表現が適用されるため､

19
00:01:42,980 --> 00:01:47,270
いずれにせよ役に立ちません｡

20
00:01:47,690 --> 00:01:54,620
これは､ 名前と説明のフィールドのように､ 複数の単語を含むフィールドを扱うときに覚えておくとよい重要なことです｡

21
00:01:54,860 --> 00:02:00,590
これは項レベルのクエリの性質なので､ あまり大きな驚きでないことを祈ります｡

22
00:02:01,040 --> 00:02:07,990
対応している機能とそうでない機能をすべて紹介することはしませんが､ この講義にドキュメントへのリンクを添付しています｡

23
00:02:08,030 --> 00:02:11,870
このページでは､ 利用可能なものの概要が簡潔に説明されています｡ 

24
00:02:12,440 --> 00:02:20,210
最後に､ ワイルドカードクエリと同様に､ クエリ内で正規表現を使用する際には､ パフォーマンスに留意する必要があることに言及したい｡

25
00:02:20,540 --> 00:02:24,860
リクエストクエリがどれだけ効率的かは､ 書くパターンに大きく依存します｡ 

26
00:02:25,070 --> 00:02:30,980
例えば､ パターン内でアスタリスクのようなワイルドカードパターンの使用を制限するようにします｡ 

27
00:02:31,010 --> 00:02:37,010
このようなワイルドカードパターンを使用することは必ずしも問題ではありませんが､ その際､ ワイルドカードの前にできるだけ長い接頭辞を付けるようにすると､

28
00:02:37,010 --> 00:02:43,070
パフォーマンスが大幅に向上します｡

29
00:02:43,550 --> 00:02:48,140
ワイルドカードクエリと同様に､ パターンの先頭にワイルドカードを含めることは､ パフォーマンスを低下させるので､

30
00:02:48,140 --> 00:02:51,020
常に避けるようにすべきです｡

31
00:02:51,500 --> 00:02:57,590
そしてまた､ インデックスに文書を追加するにつれて問題が大きくなるため､ そう簡単には気づかないかもしれないものです｡

32
00:02:57,710 --> 00:03:02,360
しかし､ これらのことを念頭に置いてパターンを書いていけば､ 良いものになるはずです｡ 
