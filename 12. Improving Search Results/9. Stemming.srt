1
00:00:02,420 --> 00:00:06,200
この講義では､ 単語のステミングについて少しお話します｡ 

2
00:00:06,320 --> 00:00:13,280
このコースの前半で､ ステミングについて少し触れました｡ また､ マッピングについて説明したときに､ ステミングの使用例も見ました｡

3
00:00:13,280 --> 00:00:14,930
でも､ そのことを再確認したいのです｡ 

4
00:00:14,930 --> 00:00:20,720
デミングは､ 検索クエリのマッチングを改善する方法の1つなので､ この講義では､ 蛍光ペンで語幹のある単語も強調する方法を紹介する以外は､

5
00:00:20,720 --> 00:00:27,440
新しいことを紹介するというより､ 復習のような内容になっています｡

6
00:00:28,070 --> 00:00:28,320
なるほど｡ 

7
00:00:28,460 --> 00:00:34,040
そこで､ descriptionフィールドに使用するカスタムアナライザーであらかじめインデックスを追加しておきました｡ 

8
00:00:34,310 --> 00:00:39,800
クエリには見たこともないものが含まれているので､ あらかじめやっておいたのですが､ 早速見てみましょう｡

9
00:00:39,800 --> 00:00:46,820
とにかく､ アナライザーは Stemmer underscore test というカスタムトークンフィルタを使用しており､ これは stemmer

10
00:00:46,820 --> 00:00:47,450
型である｡

11
00:00:47,750 --> 00:00:53,630
言語はnameパラメータで英語にしていますが､ パラメータに言語を指定することもできます｡

12
00:00:54,230 --> 00:00:59,810
このDemingとは別に､ synonym underscore testというトークンフィルタにいくつかの同義語を追加し､

13
00:00:59,810 --> 00:01:02,990
アナライザもそれを利用しています｡

14
00:01:03,260 --> 00:01:09,410
具体的には､ firmとloveという言葉の対義語を定義したのですが､ この講義ではこれで十分です｡

15
00:01:09,590 --> 00:01:16,250
このクエリはGitHubのリポジトリにあるので､ 自分で入力する必要がないことを覚えておいてください｡

16
00:01:16,820 --> 00:01:23,360
というのも､ 正直なところ､ 文書がないとインデックスも面白くないからだ｡ 

17
00:01:24,620 --> 00:01:30,110
では､ このindex stemming underscore testにpost requestを発行してみましょう｡ 

18
00:01:32,390 --> 00:01:39,080
そして､ デフォルトのタイプで､ IDを1にして､ 説明文だけを追加してみましょう｡ 

19
00:01:40,640 --> 00:01:41,600
入力するだけです｡ 

20
00:01:41,600 --> 00:01:45,170
私はこの会社で働くのが好きです｡ 

21
00:01:45,170 --> 00:01:46,340
感嘆符を打つ｡ 

22
00:01:46,880 --> 00:01:53,060
ご覧のとおり､ 説明には 2 つの同義語と working という単語が含まれており､ work にステム処理されます｡

23
00:01:53,740 --> 00:01:54,920
よし､ 実行してみよう｡ 

24
00:01:55,730 --> 00:02:01,940
さて､ ドキュメントのインデックスができたので､ enjoyとworkという単語を検索する簡単なマッチクエリを書いてみましょう｡

25
00:02:02,360 --> 00:02:06,020
私が何を言いたいかわかると思うので､ 書き出してみましょう｡ 

26
00:02:06,500 --> 00:02:08,270
スペースを入れてみる

27
00:02:10,790 --> 00:02:19,790
そして､ その核となるのが､ ステミング・アンダースコア・テスト・デフォルト検索APIです｡ 

28
00:02:21,520 --> 00:02:29,110
マッチクエリで採石場のオブジェクトで､ 用語の説明フィールドをクエリすることになります｡ 

29
00:02:29,110 --> 00:02:30,550
仕事を楽しむ｡ 

30
00:02:31,450 --> 00:02:37,810
クエリを実行すると､ ソース文書にloveとworkingという用語が含まれているにもかかわらず､ 文書がマッチする｡

31
00:02:38,200 --> 00:02:42,490
一致するのは､ もちろん同義語とステミングによるものです｡ 

32
00:02:42,940 --> 00:02:49,690
同義語の仕組みについては､ すでに以前の講義で説明しましたので､ 今回はステミングに焦点を当てましょう｡

33
00:02:49,930 --> 00:02:55,780
この2つを組み合わせることで､ いかに強力な検索エンジンを構築できるかを知っていただきたいと思ったのです｡

34
00:02:56,290 --> 00:02:58,630
つまり､ このクエリは仕事という言葉とマッチしているのです｡ 

35
00:02:58,630 --> 00:03:01,090
しかし､ 働くことに変えたらどうなるのでしょう｡ 

36
00:03:01,270 --> 00:03:02,560
さて､ どうでしょう｡ 

37
00:03:02,590 --> 00:03:05,410
ついでに用語も変えた方がいい｡ 

38
00:03:05,410 --> 00:03:06,970
エンジョイからラブへも｡ 

39
00:03:07,420 --> 00:03:13,390
そこで､ クエリをwrite love workingに変更して､ 再度実行してみます｡ 

40
00:03:14,050 --> 00:03:16,030
ドキュメントはまだ一致します｡ 

41
00:03:16,120 --> 00:03:23,260
検索クエリが分析され､ 分析過程でworkingという用語がworkにステム処理されるのです｡

42
00:03:23,590 --> 00:03:29,650
これは､ 文書がインデックスされたときにも起こるので､ 転置インデックス内に格納された用語である｡

43
00:03:29,950 --> 00:03:34,660
そのため､ Elasticsearchが転置インデックスを検索して一致した場合､ 一致するものがある｡ 

44
00:03:35,080 --> 00:03:40,930
つまり､ workとworkingの両方を効果的に検索して､ マッチングさせることができるのです｡

45
00:03:41,380 --> 00:03:46,140
このように､ 2つの単語は非常に密接に関連しているため､ 検索エンジンはより柔軟に対応することができます｡ 

46
00:03:46,150 --> 00:03:50,830
ですから､ ユーザーがどちらかを使っている場合に､ ドキュメントを除外するようなことは､ おそらくしないでしょう｡ 

47
00:03:51,700 --> 00:03:52,200
なるほど｡ 

48
00:03:52,210 --> 00:03:53,470
もうひとつだけ｡ 

49
00:03:53,620 --> 00:04:01,120
前回の講義で蛍光ペンの話をしたときに､ 違う単語を検索していても同義語がハイライトされることを紹介しました｡

50
00:04:01,570 --> 00:04:07,240
例えば､ 原文にloveという用語が含まれているのに､ joyという用語を検索することがある｡ 

51
00:04:07,570 --> 00:04:11,530
この場合､ 結果内で愛という言葉が強調表示されます｡ 

52
00:04:12,010 --> 00:04:14,360
この仕組みは､ ボンネットの中ですでにご存じですね｡ 

53
00:04:14,380 --> 00:04:18,190
それでは､ クエリにハイライトを追加して､ その例をお見せしましょう｡ 

54
00:04:18,580 --> 00:04:21,550
検索クエリも元のものに戻しておきます｡ 

55
00:04:23,110 --> 00:04:31,180
では､ 作業を楽しんでから､ ハイライトオブジェクトとfieldsパラメータを追加してみましょう｡ 

56
00:04:32,070 --> 00:04:36,180
フィールドはdescriptionで､ 値は空のオブジェクトにしておくだけです｡ 

57
00:04:36,990 --> 00:04:39,000
では､ クエリを実行してみましょう｡ 

58
00:04:39,690 --> 00:04:41,970
では､ ステミングとどのような関係があるのでしょうか｡ 

59
00:04:42,000 --> 00:04:47,430
さて､ この結果を見ると､ 「愛」と「働く」という言葉がともに強調されていることがわかります｡ 

60
00:04:47,790 --> 00:04:53,010
1つ目は､ 働くという言葉に関して､ 実際には愛という言葉を検索していないにもかかわらず､

61
00:04:53,010 --> 00:04:56,410
同義語がハイライトされている例です｡

62
00:04:56,430 --> 00:05:00,180
仕事という言葉で検索しても､ この言葉はハイライトされたままです｡ 

63
00:05:00,570 --> 00:05:04,710
それは､ 転置インデックス内にタームワークとして単語が格納されているからである｡ 

64
00:05:05,310 --> 00:05:10,680
しかし､ 転置インデックスには､ 元の単語のオフセットも格納されているため､

65
00:05:10,680 --> 00:05:14,550
元の単語はハイライトされたままです｡

66
00:05:15,090 --> 00:05:24,990
以上､ フィールドにステマーを適用する方法と､ テキストフィールドにステミングが適用された後でもElasticsearchが元の単語をハイライトする方法について簡単に説明しました｡
