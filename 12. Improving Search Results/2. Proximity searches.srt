1
00:00:02,360 --> 00:00:06,380
以前､ フレーズの一致クエリでフレーズを検索する方法を紹介しました｡ 

2
00:00:06,470 --> 00:00:13,010
フレーズ検索を行う場合､ 各フレーズ用語が正確に同じ順番で出現していないと､ 文書がマッチしません｡

3
00:00:13,370 --> 00:00:15,230
かなり厳しい条件ですね｡ 

4
00:00:15,230 --> 00:00:18,230
だから､ その条件を少し緩めたいのかもしれません｡ 

5
00:00:18,560 --> 00:00:26,360
スパイシーソースという語句があれば､ スパイシートマトソースという語句をこの順に含む文書にもマッチさせたい場合がある｡

6
00:00:26,780 --> 00:00:33,530
そこで､ 制約を緩和して､ 検索する語句の間にいくつもの語句を入れることができるようにすることが考えられます｡

7
00:00:33,710 --> 00:00:35,960
この講義では､ それを見ていきます｡ 

8
00:00:35,960 --> 00:00:40,340
しかし､ その前に少し話を戻して､ 用語の順序がどのように保存されるかについて説明します｡ 

9
00:00:40,940 --> 00:00:46,910
ご存知のように､ テキストフィールドは分析され､ 分析プロセスの一部として､ テキスト入力のトークン化が行われます｡ 

10
00:00:47,000 --> 00:00:53,960
入力を項に分割する際､ 項の位置も記録し､ これを転置インデックスに格納する｡

11
00:00:54,410 --> 00:00:58,370
マッチフレーズクエリに供給されたフレーズも分析される｡ 

12
00:00:58,460 --> 00:01:05,060
このクエリは､ 文書に用語が含まれていることを確認するだけでなく､ 用語が正しい順序で表示されることも確認します｡

13
00:01:05,360 --> 00:01:12,350
そのために､ 与えられた文書を分析する際に追加された転置インデックスに格納された用語の位置を使用する｡

14
00:01:12,860 --> 00:01:18,950
つまり､ ある文書がスパイシーソースというフレーズにマッチするためには､ 検索対象のフィールドに両方の用語が現れる必要があるのです｡

15
00:01:18,980 --> 00:01:24,920
また､ 項元の位置は､ スパイシーな項の位置より1つ大きくなければならない｡ 

16
00:01:25,190 --> 00:01:29,450
この2つの条件を満たせば､ その文書はフレーズにマッチすることになる｡ 

17
00:01:29,990 --> 00:01:35,480
あらかじめ作っておいた新しいインデックスに対して､ マッチフレーズクエリを実行することで確認することができます｡ 

18
00:01:35,510 --> 00:01:37,790
ここに掲載されている文書が含まれています｡ 

19
00:01:37,790 --> 00:01:41,510
というわけで､ フォローする場合は､ 以下のクエリを実行する必要があります｡ 

20
00:01:41,660 --> 00:01:44,690
いつものように､ GitHubのリポジトリ内で見つけることができます｡ 

21
00:01:45,200 --> 00:01:49,250
では､ あらかじめ入力しておいたこのマッチフレーズクエリを実行してみましょう｡ 

22
00:01:49,310 --> 00:01:51,320
ここで見たことがないものはない｡ 

23
00:01:53,060 --> 00:01:59,270
そこで､ このマッチフレーズクエリを実行して､ スパイシーソースのフレーズを持つ文書をマッチさせると､ 1つだけマッチします｡

24
00:01:59,390 --> 00:02:03,740
具体的には､ 2つの用語の両方と正しい順序でドキュメントを作成します｡ 

25
00:02:04,040 --> 00:02:08,610
仮に､ 辛味項とソース項の間に項を許容するとする｡ 

26
00:02:08,630 --> 00:02:13,280
これは､ マッチフレーズクエリにslopというパラメータを追加することで実現できる｡ 

27
00:02:13,850 --> 00:02:21,560
このslopパラメータの値は､ 一致とみなされるために許容される部品の距離を表す整数値でなければならない｡

28
00:02:21,800 --> 00:02:26,900
どの程度離れているかとは､ 文書が一致するために用語を何回移動させることができるかということです｡ 

29
00:02:26,930 --> 00:02:29,210
これをより明確にするために､ 例を見てみましょう｡ 

30
00:02:29,970 --> 00:02:36,030
そこで､ ここにスロット・パラメータを追加し､ それを1に設定して､ もう一度クエリを実行してみます｡ 

31
00:02:36,880 --> 00:02:42,460
このラブパラメータをマトリクスクエリに追加することを､ 近接検索と呼ぶ｡ 

32
00:02:42,730 --> 00:02:49,360
クエリで指定した用語とマッチする文書がどれだけ近いかを「近接度」と呼ぶ｡

33
00:02:49,840 --> 00:02:55,540
したがって､ スパイシーとソースという言葉を1つ以内の近さで検索していると言えるでしょう｡ 

34
00:02:56,260 --> 00:03:00,300
結果を確認すると､ 別の文書がクエリにマッチするようになったことがわかる｡ 

35
00:03:00,310 --> 00:03:04,600
具体的には､ スパイシートマトソースのタイトルがついた文書です｡ 

36
00:03:05,110 --> 00:03:09,650
このタイトルには､ フレーズで指定した用語の間に別の用語が含まれています｡ 

37
00:03:09,670 --> 00:03:13,450
これは､ slotパラメータに値1を追加することで可能にしています｡ 

38
00:03:13,990 --> 00:03:19,150
タイトルが一致するためには､ 用語のソースを一度移動させる必要があるため､ ドキュメントが一致します｡ 

39
00:03:19,420 --> 00:03:22,090
簡単なテーブルで何が起こるか見てみましょう｡ 

40
00:03:22,720 --> 00:03:30,560
つまり､ 文書に含まれる用語と､ その用語がクエリ内の転置インデックスに格納される位置がわかる｡

41
00:03:30,580 --> 00:03:35,500
スパイシーという言葉が1位で､ ソースという言葉もその位置です｡ 

42
00:03:35,950 --> 00:03:41,260
あとは､ 用語ソースを3番目に移動させるだけで､ 文書が一致するようになる｡ 

43
00:03:41,590 --> 00:03:44,470
現在､ ポジション2にはどの用語も存在する可能性があります｡ 

44
00:03:44,500 --> 00:03:46,660
つまり､ 一手間がかかるだけだったのです｡ 

45
00:03:47,230 --> 00:03:54,380
これはスロット値1を満たすもので､ 一手間をかけることで､ より正式な文書に仕上げることができます｡

46
00:03:54,400 --> 00:03:57,820
この移動回数を編集距離という｡ 

47
00:03:58,560 --> 00:04:02,040
スロットパラメーターの値を2つにしてみましょう｡ 

48
00:04:03,730 --> 00:04:05,340
これで､ もう1試合できるようになりました｡ 

49
00:04:05,350 --> 00:04:07,090
実は､ 面白いものです｡ 

50
00:04:07,120 --> 00:04:11,380
タイトルの中で辛口と出典の用語が入れ替わっていることに注目してください｡ 

51
00:04:11,530 --> 00:04:13,900
では､ なぜその文書が一致するのでしょうか｡ 

52
00:04:14,020 --> 00:04:22,000
というのも､ slabパラメータを使用する場合､ 条件､ より正式には編集距離に対して､ いくつもの移動を許可しているからです｡

53
00:04:22,510 --> 00:04:29,290
編集距離がslubパラメータの値を超えない限り､ 項はどのような順序で配列されてもよい｡

54
00:04:29,560 --> 00:04:34,900
これは基本的に､ 用語はスロットパラメータによって何度も移動でき､ スロットパラメータを超えない近接した範囲に用語が現れる限り､

55
00:04:34,900 --> 00:04:41,710
マッチングが成立することを意味する｡

56
00:04:42,190 --> 00:04:50,680
そのため､ Slubパラメータでは､ 項の順番は特に問わないが､ 項の入れ替わりには大きな付加距離が必要となる｡

57
00:04:51,280 --> 00:04:58,420
もしそうでなければ､ 他のクエリで行ったように､ テーブルを使った例で確認することができればと思います｡

58
00:04:59,130 --> 00:05:07,320
つまり､ 2位と3位にそれぞれソースとスパイシーという用語があり､ クエリでは逆の順序で用語を指定しています｡

59
00:05:07,350 --> 00:05:13,410
用語の入れ替えは､ 一回の操作で済むと思うかもしれません｡  e. の編集距離は1である｡

60
00:05:13,770 --> 00:05:14,790
そんなことはありません｡ 

61
00:05:14,790 --> 00:05:20,580
しかし､ 編集の場合は､ まず､ 用語の辛さかソースのどちらかを1つ移動させる必要があるため､

62
00:05:20,580 --> 00:05:22,620
距離2が必要である｡

63
00:05:22,890 --> 00:05:25,830
この例では､ タームスパイシーに移行したところです｡ 

64
00:05:26,040 --> 00:05:31,950
その際､ 2つの項が同じ位置を共有しているので､ もう一度項の辛さを移動させる必要があります｡ 

65
00:05:31,950 --> 00:05:38,370
つまり､ 編集距離が2であることは､ 文書が一致するスロットパラメータで指定された境界内にあるため､

66
00:05:38,400 --> 00:05:43,180
用語の順序は文書内の順序と一致するようになったのです｡

67
00:05:43,200 --> 00:05:47,430
そのため､ 文書が一致するように用語を入れ替えることは､ 全く問題ありません｡ 

68
00:05:47,820 --> 00:05:54,990
もし､ スラブパラメータに高い値を指定していたら､ 2つの項の間に1つ以上の項が入る可能性がある｡

69
00:05:55,440 --> 00:06:05,670
とにかくポイントは､ 追加された距離がslabパラメータに指定した値を超えない限り､ ドキュメントに合わせて用語を何度でも移動させることができることです｡

70
00:06:05,700 --> 00:06:07,230
ご理解いただけたでしょうか？

71
00:06:07,770 --> 00:06:11,520
では､ slabパラメータにどのような値を指定すればよいのだろうか｡ 

72
00:06:11,760 --> 00:06:16,860
もちろん､ この質問に対する明確な答えはありません｡ 

73
00:06:17,580 --> 00:06:23,340
これは､ 試行錯誤したり､ いくつかのデータセットでテストしたりして､ 時間をかけて微調整していくものです｡

74
00:06:24,090 --> 00:06:30,330
この例では､ フレーズクエリが2つの単語で構成されているため､ 物事が少し単純であることを知っておく必要があります｡

75
00:06:30,480 --> 00:06:33,660
現実の世界では､ 必ずしもそうではないでしょう｡ 

76
00:06:34,020 --> 00:06:42,090
したがって､ slotパラメータに指定する値は､ 任意の2つの用語間だけでなく､ すべての用語の最大編集距離となります｡

77
00:06:42,450 --> 00:06:46,140
ですから､ 用語が多いほど､ スロッピングを高く設定したほうがよいでしょう｡ 

78
00:06:46,800 --> 00:06:50,670
その価値は､ データやどのようなマッチングを目指すかによって､ 大きく変わってきます｡ 

79
00:06:50,940 --> 00:06:57,810
近接は関連スコアに影響するので､ そうでない場合よりも少し高めに設定するのがまともな考えでしょう｡

80
00:06:58,320 --> 00:07:04,170
もし､ 結果の中に関連性の低い文書が含まれても構わないのであれば､ この方法もありかもしれません｡

81
00:07:04,920 --> 00:07:10,560
以上が､ マッチフレーズクエリに柔軟性を持たせる基本であった｡ もし､ すべての用語が順番に､ 特定の順序で出現しなければならないという条件を緩和したい場合は､

82
00:07:10,560 --> 00:07:16,560
slabパラメータで実現することが可能である｡
