1
00:00:01,180 --> 00:00:08,560
これまで､ かなりの数の検索クエリを見てきましたが､ そのすべての入力は､ 開発者である私たちが完全にコントロールできました｡

2
00:00:08,740 --> 00:00:15,190
エンドユーザーが検索クエリを書いて､ それをElasticsearchクラスタに渡すこともよくあることです｡

3
00:00:15,220 --> 00:00:19,120
ユーザーがタイプミスをしたり､ スペルミスをするだけならどうでしょうか？

4
00:00:19,630 --> 00:00:27,670
通常であれば､ ユーザーにとって関連性の高い文書であっても､ 与えられたクエリにマッチしない可能性がある｡

5
00:00:28,150 --> 00:00:33,730
このような場合､ ユーザーが間違ったキーを押したとしても､ 関連する結果を得られるように処理したいと思うかもしれません｡

6
00:00:34,240 --> 00:00:39,400
幸いなことに､ Elasticsearchではファジィと呼ばれるものを使うことで､ これは簡単です｡ 

7
00:00:39,580 --> 00:00:45,610
これにはいくつかの方法がありますが､ 最も一般的な方法は､ マッチクエリにFussinessというパラメータを追加することです｡

8
00:00:45,610 --> 00:00:47,440
というわけで､ まずはそんなところから｡ 

9
00:00:48,010 --> 00:00:52,090
ファジーネスがどのように機能するかについて深く掘り下げる前に､ 例を見てみましょう｡ 

10
00:00:52,150 --> 00:00:57,520
商品インデックスの名前フィールドでロブスターを検索する単純なマッチクエリを用意しました｡ 

11
00:00:58,030 --> 00:01:02,380
クエリを実行すると､ ロブスターという単語を含む5つのマッチが得られます｡ 

12
00:01:02,680 --> 00:01:06,910
しかし､ キーを打ち間違えて､ 誤ってゼロキーを代わりに押してしまったとします｡ 

13
00:01:06,910 --> 00:01:07,360
ああ｡ 

14
00:01:07,390 --> 00:01:09,190
では､ クエリを変更してみましょう｡ 

15
00:01:10,950 --> 00:01:14,160
そして､ このようにゼロを並べ替えて､ 再びクエリを実行します｡ 

16
00:01:14,550 --> 00:01:21,990
ロブスターという言葉を検索するつもりだったのは明らかなので､ かなり残念なことですが､ 今はもう何もマッチしません｡

17
00:01:22,530 --> 00:01:25,620
Fussinessというパラメータを追加することで､ それを解決しよう｡ 

18
00:01:25,770 --> 00:01:31,380
とりあえず､ autoという値を指定して､ 指定可能な値に戻しておきます｡ 

19
00:01:31,950 --> 00:01:38,580
そこで､ このようにfuzzinessというパラメータを追加し､ autoを文字列で指定します｡ 

20
00:01:39,570 --> 00:01:41,670
そして､ 今すぐ実行しましょう｡ 

21
00:01:41,670 --> 00:01:48,530
文字数の挿入､ 削除､ 置換を許可するようになったので､ 再び5つのマッチを得ることができます｡

22
00:01:48,540 --> 00:01:49,440
だから､ クエリーを作る｡ 

23
00:01:49,440 --> 00:01:50,820
指定された文書に一致させる｡ 

24
00:01:52,020 --> 00:01:57,900
さて､ サビ残の例をご覧いただいたところで､ 実際にどのような効果があるのか､ 一歩踏み込んで見てみましょう｡

25
00:01:58,410 --> 00:02:05,850
Fussinessは､ Levenstein Distance（以下､ 編集距離）と呼ばれるものを計算することで実装されています｡

26
00:02:06,600 --> 00:02:11,700
例えば､ ロブスターとロブスターにゼロをつけた2つの単語があるとします｡ 

27
00:02:12,120 --> 00:02:19,770
そして､ 両者の距離を足したものが､ 一方の単語をもう一方の単語に変えるために必要な最小限の一文字編集の回数となる｡

28
00:02:20,590 --> 00:02:25,480
一文字の編集は､ 挿入削除と置換のいずれでも可能です｡ 

29
00:02:25,750 --> 00:02:33,430
この例では､ 0をOに置き換えるだけで単語が一致するため､ 編集距離は1だけとなる｡

30
00:02:34,090 --> 00:02:42,040
話を続ける前に､ 先ほど見たマッチフレーズクエリとは異なるアルゴリズムでファジィネスを計算していることをお伝えしておきたいと思います｡

31
00:02:42,310 --> 00:02:48,670
つまり､ 編集距離の計算方法が異なるため､ 傾きとファジーさのパラメータを比較することはできないのです｡ 

32
00:02:49,090 --> 00:02:54,520
Levenstein Distanceでは､ マッチフレーズクエリのときのように文字を移動させることはありません｡ 

33
00:02:55,000 --> 00:03:00,490
もし､ あなたが混乱していたり､ 「そういえば､ fuzzinessのパラメータに文字列も指定するのってどうなんだろう」と思っていたりする場合に備えて､

34
00:03:00,490 --> 00:03:04,090
このことを書いておきます｡

35
00:03:04,480 --> 00:03:09,820
お分かりのように､ Elasticsearchに自動的にファジーネスを処理するように指示しています｡ 

36
00:03:10,060 --> 00:03:14,680
これは､ 各項目の長さを調べることによって行われ､ 以下のルールを使用します｡ 

37
00:03:15,160 --> 00:03:19,670
長さが1または2の場合､ その用語は完全一致でなければならない｡ 

38
00:03:19,700 --> 00:03:24,790
I. e. 長さが 3 から 5 の場合はファジィを使用しない｡ 

39
00:03:24,820 --> 00:03:29,350
最大編集距離1が使用され､ 長さが5以上の場合｡ 

40
00:03:29,380 --> 00:03:30,820
編集は2回まで可能です｡ 

41
00:03:31,450 --> 00:03:35,560
なお､ 使用可能な編集距離は最大で2つです｡ 

42
00:03:36,040 --> 00:03:38,260
これには2つの理由があります｡ 

43
00:03:38,290 --> 00:03:46,080
まず､ 人間の誤字脱字の80%は､ 編集距離が1であれば修正できるという研究結果があります｡

44
00:03:46,090 --> 00:03:49,870
そのため､ 1や2の値であれば､ ほとんどすべてのミスをキャッチすることができます｡ 

45
00:03:50,410 --> 00:03:55,870
次に､ ファジィ値を高く指定できるようにすると､ すぐにパフォーマンスが低下してしまう｡ 

46
00:03:55,990 --> 00:04:02,110
また､ ファジーネス値を高くすると､ 奇妙で予測不可能な結果が出始めるということです｡ 

47
00:04:02,470 --> 00:04:09,940
例えば､ 5文字で構成される単語を入力し､ 最大編集距離を4文字に指定できたとする｡

48
00:04:09,970 --> 00:04:14,140
結果はバラバラでしょうから､ 明らかにいい加減なことはないでしょう｡ 

49
00:04:14,650 --> 00:04:20,110
そうでなければ､ 奇妙なマッチングを避けるために､ 入力の長さに基づいて適切な値を決定する､

50
00:04:20,110 --> 00:04:27,670
同様のアルゴリズムを書くことにすぐに気がつくからだ｡

51
00:04:28,120 --> 00:04:32,520
クエリを制御できるのであれば､ 確かに自分で値を指定することができます｡ 

52
00:04:32,530 --> 00:04:35,770
しかし､ それが意味を持つ場面はかなり少ない｡ 

53
00:04:36,070 --> 00:04:38,890
だから､ 自分が何をやっているのか分からない限り､ 付加価値を残すべきでしょう｡ 

54
00:04:38,890 --> 00:04:41,110
また､ ファジィを有効にしたい場合｡ 

55
00:04:41,620 --> 00:04:46,690
クエリーをコピーして､ 今度はゼロを入れずにLusterに戻してみましょう｡ 

56
00:04:51,850 --> 00:04:52,150
ようなものです｡ 

57
00:04:52,150 --> 00:04:55,060
では､ もう一度クエリを実行してみましょう｡ 

58
00:04:56,900 --> 00:05:03,470
おそらく､ 騒がずにクエリのマッチングを5件得たことを思い出していただけると思いますが､ 今度は6件得られることがわかります｡

59
00:05:04,300 --> 00:05:10,480
スクロールしていくと､ 最終的にこの名前フィールド内にロブスターという言葉が含まれていない文書が見つかるはずだ｡

60
00:05:12,700 --> 00:05:15,250
その代わり､ 牡蠣という言葉が含まれています｡ 

61
00:05:15,640 --> 00:05:19,000
この文書がクエリにマッチする理由を見てみましょう｡ 

62
00:05:19,630 --> 00:05:25,480
最初のフィットネスパラメータがautoに設定されており､ クエリ項の長さが7と8なので､

63
00:05:25,480 --> 00:05:27,400
距離の2が許容される｡

64
00:05:27,850 --> 00:05:30,260
だから､ ロブスターという言葉をオイスターと一致させる｡ 

65
00:05:30,280 --> 00:05:35,260
まず､ 先頭のLを削除し､ Bをyに置き換える必要があります｡ 

66
00:05:35,560 --> 00:05:37,240
たった2回の編集なので｡ 

67
00:05:37,270 --> 00:05:43,600
これは､ 実際には全く別の単語を扱っているにもかかわらず､ その文書が実際にクエリにマッチしていることを意味する｡

68
00:05:44,020 --> 00:05:47,380
あまりないことですが､ 間違いなくあり得ることです｡ 

69
00:05:48,100 --> 00:05:48,550
わかりました｡ 

70
00:05:48,550 --> 00:05:53,920
そこで､ 大騒ぎするのは1期単位と書きましたが､ 早速､ それを証明してみましょう｡ 

71
00:05:54,250 --> 00:05:58,690
既存のクエリをコピーして､ ブール演算子をendに設定すればいいんだ｡ 

72
00:05:58,690 --> 00:05:59,960
そして､ 最初の名前はparamsです｡ 

73
00:05:59,980 --> 00:06:00,640
それは1つです｡ 

74
00:06:00,640 --> 00:06:02,260
そして､ クエリも変えてみる｡ 

75
00:06:02,410 --> 00:06:04,930
では､ さっそく行ってみましょう｡ 

76
00:06:05,980 --> 00:06:10,060
だから､ これをコピーして､ 貼り付けて､ それが最初のものです｡ 

77
00:06:10,780 --> 00:06:14,260
ブーリアン演算子を指定し､ endとする｡ 

78
00:06:14,500 --> 00:06:23,620
そして､ このパラメーターの1番目を1にして､ クエリも0とloveでロブスターに変えてみます｡

79
00:06:23,950 --> 00:06:29,110
ここでは､ 「ロブスター活け造り」というフレーズを検索しようとするユーザーをシミュレートしています｡ 

80
00:06:29,560 --> 00:06:30,910
では､ クエリを実行してみましょう｡ 

81
00:06:32,140 --> 00:06:42,130
そして､ 我々は両方の用語と合計でクエリに必要な2つの方法の編集距離を間違えたので､ それはLobster Liveという名前の製品を一致させる方法に注意してください｡

82
00:06:42,430 --> 00:06:48,760
しかし､ fussinessパラメータは各用語に個別に適用されるため､ 各用語に対して1回の編集で済むので､

83
00:06:48,760 --> 00:06:51,700
1という値で十分です｡

84
00:06:51,970 --> 00:06:55,780
もし､ この値がクエリ全体に対するものであれば､ 2つの編集が必要です｡ 

85
00:06:55,780 --> 00:06:57,370
でも､ そうではないんです｡ 

86
00:06:57,370 --> 00:07:01,630
だから､ このパラメータの1番目とドキュメントが一致し､ 2番目と一致しないわけです｡ 

87
00:07:02,200 --> 00:07:02,710
わかりました｡ 

88
00:07:02,710 --> 00:07:03,760
最後にもうひとつ｡ 

89
00:07:03,910 --> 00:07:09,370
レーベンシュタイン距離とは､ ある文字列が他の文字列と一致するために､ 1文字の挿入､

90
00:07:09,370 --> 00:07:12,850
削除､ 置換を何回行うかを示すものであると述べました｡

91
00:07:13,210 --> 00:07:15,160
これにはプラスアルファがあるのですが｡ 

92
00:07:15,610 --> 00:07:21,970
フレデリック・アマロという人が､ レーベンシュタイン・アルゴリズムをいわゆるトランスポジションで拡張したんです｡ 

93
00:07:22,360 --> 00:07:27,220
トランスポジションとは､ 基本的に隣り合う2つのキャラクターを入れ替えることを意味します｡ 

94
00:07:27,580 --> 00:07:33,610
つまり､ AとBという文字が隣り合っていたとしても､ その後にAトランスのポジションが続くように入れ替わることで､

95
00:07:33,610 --> 00:07:38,060
1つの編集としてカウントされることがあるのです｡

96
00:07:38,080 --> 00:07:40,150
では､ その例をお見せしましょう｡ 

97
00:07:41,180 --> 00:07:44,840
もう一度､ 既存のクエリをコピーしてみましょう｡ 

98
00:07:49,410 --> 00:07:49,800
なるほど｡ 

99
00:07:49,800 --> 00:07:51,290
クエリーを少し整理してみましょう｡ 

100
00:07:51,300 --> 00:07:53,820
operatorパラメータを削除してみる｡ 

101
00:07:54,810 --> 00:07:59,130
最初のネストパラメータは1のままにして､ クエリを変更してみます｡ 

102
00:07:59,610 --> 00:08:01,740
So l v i e.

103
00:08:01,980 --> 00:08:06,600
そして､ これはユーザーがライブという言葉を検索するときにスペルを間違えることをシミュレートするためのものです｡ 

104
00:08:08,790 --> 00:08:09,870
結果の中で

105
00:08:09,900 --> 00:08:13,140
liveという言葉を含む文書が､ いかにクエリーにマッチしているかに注目してください｡ 

106
00:08:13,170 --> 00:08:19,200
これは､ VとIの文字が入れ替わることで､ 文書が一致する最大編集距離を満たすため､

107
00:08:19,200 --> 00:08:24,450
1回の編集にしかカウントされないからです｡

108
00:08:24,720 --> 00:08:31,210
なお､ 遷移を伴わない最大編集距離1を満たすような編集は1つもない｡

109
00:08:31,230 --> 00:08:36,780
トランスポジションを無効にすることができるので､ 最初のe underscore transpositionパラメータをfalseに設定することでトランスポジションを無効にすれば､

110
00:08:36,780 --> 00:08:40,530
このことがわかる｡

111
00:08:40,530 --> 00:08:42,840
これは､ デフォルトで有効になっていることを意味します｡ 

112
00:08:43,360 --> 00:08:45,000
では､ 無効にしましょう｡ 

113
00:08:45,670 --> 00:08:52,770
まず､ アンダースコアでトランスポセッションの値をfalseにします｡ 

114
00:08:54,200 --> 00:08:55,430
クエリを実行してみましょう｡ 

115
00:08:56,090 --> 00:09:01,820
そして今､ トランスポジションがないと2回の編集が必要になるため､ ドキュメントが一致しなくなりました｡ 

116
00:09:02,390 --> 00:09:05,420
そして､ それがマッチクエリにファジィさを加える方法である｡ 
