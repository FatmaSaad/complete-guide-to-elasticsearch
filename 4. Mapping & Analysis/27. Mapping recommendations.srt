1

00:00:02,540  -->  00:00:07,480
Before we get back to analyzers, I want to
give a couple of recommendations in regards

2

00:00:07,480  -->  00:00:08,180
to mapping.

3

00:00:09,020  -->  00:00:13,780
Some of them are my own personal opinions,
so whether or not you want to follow them

4

00:00:13,840  -->  00:00:15,500
is of course totally up to you.

5

00:00:17,240  -->  00:00:23,700
First and foremost, I recommend that you make use 
of explicit mapping - at least for production clusters.

6

00:00:24,280  -->  00:00:30,060
Dynamic mapping is convenient during development,
but the generated field mappings are often

7

00:00:30,060  -->  00:00:31,880
not the most efficient ones.

8

00:00:32,660  -->  00:00:38,200
If you intend to store a high number of documents,
you can typically save a lot of disk space

9

00:00:38,200  -->  00:00:40,760
with more optimized mappings, for instance.

10

00:00:42,280  -->  00:00:47,400
By using explicit mappings, I mean to set
the “dynamic” parameter to “strict”

11

00:00:47,400  -->  00:00:48,940
and not just “false.”

12

00:00:49,640  -->  00:00:54,280
Setting it to “false” will enable you
to add fields for which there are no mappings.

13

00:00:54,960  -->  00:00:58,280
The fields are then simply ignored in terms
of indexing.

14

00:00:59,280  -->  00:01:04,920
Querying such fields won’t match anything,
which might lead to unexpected search results.

15

00:01:05,740  -->  00:01:10,300
That’s why I recommend that you set the
“dynamic” parameter to “strict,” because

16

00:01:10,300  -->  00:01:12,880
then you cannot end up in a situation like
that.

17

00:01:14,160  -->  00:01:18,160
Using strict mapping essentially means that
you are always in control.

18

00:01:19,960  -->  00:01:25,619
Another related recommendation is to not always
map “text” fields as both “text” and

19

00:01:25,620  -->  00:01:28,000
“keyword” unless you need to do so.

20

00:01:29,240  -->  00:01:35,000
This happens with dynamic mapping by default,
but it is often not necessary and just takes

21

00:01:35,000  -->  00:01:36,700
up additional disk space.

22

00:01:37,560  -->  00:01:43,120
If you disable dynamic mapping, you should
ask yourself how you intend to query a given field.

23

00:01:43,840  -->  00:01:46,740
Do you want to perform full-text searches
on it?

24

00:01:46,780  -->  00:01:48,720
Then you should add a “text” mapping.

25

00:01:49,340  -->  00:01:54,760
Do you want to use the field for aggregations,
sorting, or filtering based on exact values?

26

00:01:55,200  -->  00:01:56,920
Then you should add a “keyword” mapping.

27

00:01:57,840  -->  00:02:02,720
If you want to do both, you should map the
field in both ways, but that is typically

28

00:02:02,720  -->  00:02:03,820
not necessary.

29

00:02:05,760  -->  00:02:11,020
If you have full control of whichever application
is sending data to Elasticsearch, then I recommend

30

00:02:11,200  -->  00:02:13,860
that you disable coercion as well.

31

00:02:14,620  -->  00:02:20,260
Type coercion is convenient, but it is essentially
a way for Elasticsearch to forgive you for

32

00:02:20,260  -->  00:02:21,600
not doing the right thing.

33

00:02:23,460  -->  00:02:28,940
Whenever possible, always provide the correct
data types in the JSON objects that you send

34

00:02:28,940  -->  00:02:30,380
to Elasticsearch.

35

00:02:32,020  -->  00:02:37,340
If you add explicit field mappings for numeric
fields, then you should consider which kind

36

00:02:37,340  -->  00:02:39,240
of numbers you will index.

37

00:02:40,080  -->  00:02:45,540
Sometimes it is not necessary to map a field
as “long,” because an “integer” might be enough.

38

00:02:47,200  -->  00:02:52,660
The former data type can hold larger numbers,
but also requires more disk space.

39

00:02:53,620  -->  00:02:59,680
Likewise, “double” requires twice as much
disk space as “float,” so if you don’t

40

00:02:59,680  -->  00:03:03,660
need really high precision, then you should
be fine using “float.”

41

00:03:06,180  -->  00:03:11,120
There are a number of mapping parameters that
you can use to limit the amount of data that

42

00:03:11,200  -->  00:03:12,740
Elasticsearch stores.

43

00:03:13,180  -->  00:03:18,000
Actually it’s Apache Lucene that stores
this data, but that’s besides the point.

44

00:03:18,980  -->  00:03:22,660
We already discussed them, so this is just
a quick reminder.

45

00:03:24,120  -->  00:03:29,360
If you know that you won’t use a field for
sorting, aggregations, and scripting, you

46

00:03:29,360  -->  00:03:34,320
can set “doc_values” to “false” and
save quite a bit of disk space.

47

00:03:35,920  -->  00:03:41,260
If you won’t use a field for relevance scoring,
then you can set “norms” to “false”

48

00:03:41,260  -->  00:03:44,820
to avoid storing data that is only used for
relevance scoring.

49

00:03:46,220  -->  00:03:52,120
Lastly, if you won’t use a field for filtering,
you can disable indexing by setting “index”

50

00:03:52,120  -->  00:03:53,260
to “false.”

51

00:03:54,280  -->  00:04:00,300
The field can still be used for aggregations, so this 
is a common thing to do for time series data.

52

00:04:02,000  -->  00:04:08,160
These parameters are useful when storing lots
of documents, and the savings can be significant.

53

00:04:08,760  -->  00:04:13,560
If you only need to store a low number of
documents, then it’s probably not worth

54

00:04:13,560  -->  00:04:18,620
the effort to deal with these parameters;
the savings would be limited, and you might

55

00:04:18,740  -->  00:04:20,820
be overcomplicating things.

56

00:04:22,020  -->  00:04:26,960
There is no rule as to when it’s worth it
to use these parameters and when it isn’t.

57

00:04:27,520  -->  00:04:32,880
As a rule of thumb, though, it’s probably
not worth it for less than a million documents.

58

00:04:33,400  -->  00:04:38,040
If you know that you will need to store many
million documents when defining your mappings,

59

00:04:38,360  -->  00:04:41,080
then you should optimize the mappings from
the beginning.

60

00:04:41,700  -->  00:04:46,260
That way you won’t need to reindex documents
into a new index later on.

61

00:04:47,540  -->  00:04:52,240
If you don’t do it from the beginning, the
worst that can really happen is that you will

62

00:04:52,240  -->  00:04:56,900
need to reindex documents sometime, so it’s
really not the end of the world.

63

00:04:58,180  -->  00:05:03,320
There are more optimizations that you can
do depending on your use case, but these are

64

00:05:03,320  -->  00:05:04,580
the most common ones.

65

00:05:05,820  -->  00:05:10,540
I don’t want to go into a lot of detail
and bore you with edge case optimizations,

66

00:05:10,840  -->  00:05:14,940
so these are my general recommendations when
it comes to mapping fields.
